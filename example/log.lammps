LAMMPS (7 Aug 2019)
# script to get angular rdf of a system

units           metal
atom_style      atomic

#read_restart min.restart

read_data data.pos
  orthogonal box = (0 0 0) to (52.6711 52.6711 52.6711)
  5 by 2 by 3 MPI processor grid
  reading atoms ...
  8000 atoms
  read_data CPU = 0.00891495 secs
mass * 1
#read_restart 800K_20.restart

# A dummy potential with the rcut we want
pair_style  lj/cut 2.5
pair_coeff  * * 1.0 1.0 2.5

include ./angular_rdf.lmp
# Inlcude this file when you want to calculate Angular RDF
# e.g. include angular_rdf.lmp

# define the values of the variables

# ==============================================================
# Angular RDF
# ==============================================================
variable max_angle equal PI # maximum angle
variable min_angle equal 0  # minimum angle
variable nanglebins equal 10  # number of angle bins
# maximum radius
variable max_r    equal 10.0  # maximum radius for rdf
# number of radial bins
variable nrbins    equal 1000 # number of r bins

# parameters for fix ave/time
variable Nevery  equal 1
variable Nrepeat  equal 1
variable Nfreq  equal 1
# ==============================================================

# Get the rdf of the system
# for different types
#compute RDF all rdf 100 * *
# for all atoms
variable dtheta equal ${max_angle}/${nanglebins}
variable dtheta equal 3.14159265358979/${nanglebins}
variable dtheta equal 3.14159265358979/10
variable angle_lo equal ${min_angle}
variable angle_lo equal 0
variable angle_hi equal ${min_angle}+${dtheta}
variable angle_hi equal 0+${dtheta}
variable angle_hi equal 0+0.314159265358979

variable loopindex loop ${nanglebins}
variable loopindex loop 10


neighbor       2.0 bin
neigh_modify   every 4 delay 0 check yes





# =====================================================================================
# Angular RDF LOOP
# ====================================================================================

#
variable comm_cutoff equal  ${max_r}+2  # suppose neighbor skin <= 2.0
variable comm_cutoff equal  10+2  
comm_modify cutoff ${comm_cutoff}   # ghost atom commucation radius  should be larger than (max_r + neighbour skin)
comm_modify cutoff 12   

label myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 1 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 1 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 1 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 1 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0 ${angle_hi}
compute 1 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0 0.314159265358979
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL1 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL1 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL1 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL1 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL1 all ave/time 1 1 1 c_1[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL1 all ave/time 1 1 1 c_1[*] file rdf_all_1.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 0+${dtheta}
variable angle_lo equal 0+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 0.314159265358979+${dtheta}
variable angle_hi equal 0.314159265358979+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 2 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 2 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 2 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 2 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0.314159265358979 ${angle_hi}
compute 2 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0.314159265358979 0.628318530717958
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL2 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL2 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL2 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL2 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL2 all ave/time 1 1 1 c_2[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL2 all ave/time 1 1 1 c_2[*] file rdf_all_2.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 0.314159265358979+${dtheta}
variable angle_lo equal 0.314159265358979+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 0.628318530717958+${dtheta}
variable angle_hi equal 0.628318530717958+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 3 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 3 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 3 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 3 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0.628318530717958 ${angle_hi}
compute 3 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0.628318530717958 0.942477796076937
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL3 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL3 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL3 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL3 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL3 all ave/time 1 1 1 c_3[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL3 all ave/time 1 1 1 c_3[*] file rdf_all_3.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 0.628318530717958+${dtheta}
variable angle_lo equal 0.628318530717958+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 0.942477796076937+${dtheta}
variable angle_hi equal 0.942477796076937+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 4 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 4 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 4 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 4 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0.942477796076937 ${angle_hi}
compute 4 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 0.942477796076937 1.25663706143592
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL4 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL4 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL4 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL4 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL4 all ave/time 1 1 1 c_4[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL4 all ave/time 1 1 1 c_4[*] file rdf_all_4.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 0.942477796076937+${dtheta}
variable angle_lo equal 0.942477796076937+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 1.25663706143592+${dtheta}
variable angle_hi equal 1.25663706143592+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 5 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 5 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 5 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 5 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 1.25663706143592 ${angle_hi}
compute 5 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 1.25663706143592 1.5707963267949
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL5 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL5 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL5 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL5 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL5 all ave/time 1 1 1 c_5[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL5 all ave/time 1 1 1 c_5[*] file rdf_all_5.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 1.25663706143592+${dtheta}
variable angle_lo equal 1.25663706143592+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 1.5707963267949+${dtheta}
variable angle_hi equal 1.5707963267949+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 6 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 6 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 6 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 6 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 1.5707963267949 ${angle_hi}
compute 6 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 1.5707963267949 1.88495559215388
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL6 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL6 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL6 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL6 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL6 all ave/time 1 1 1 c_6[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL6 all ave/time 1 1 1 c_6[*] file rdf_all_6.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 1.5707963267949+${dtheta}
variable angle_lo equal 1.5707963267949+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 1.88495559215388+${dtheta}
variable angle_hi equal 1.88495559215388+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 7 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 7 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 7 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 7 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 1.88495559215388 ${angle_hi}
compute 7 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 1.88495559215388 2.19911485751286
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL7 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL7 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL7 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL7 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL7 all ave/time 1 1 1 c_7[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL7 all ave/time 1 1 1 c_7[*] file rdf_all_7.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 1.88495559215388+${dtheta}
variable angle_lo equal 1.88495559215388+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 2.19911485751286+${dtheta}
variable angle_hi equal 2.19911485751286+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 8 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 8 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 8 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 8 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 2.19911485751286 ${angle_hi}
compute 8 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 2.19911485751286 2.51327412287184
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL8 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL8 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL8 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL8 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL8 all ave/time 1 1 1 c_8[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL8 all ave/time 1 1 1 c_8[*] file rdf_all_8.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 2.19911485751286+${dtheta}
variable angle_lo equal 2.19911485751286+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 2.51327412287184+${dtheta}
variable angle_hi equal 2.51327412287184+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 9 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 9 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 9 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 9 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 2.51327412287184 ${angle_hi}
compute 9 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 2.51327412287184 2.82743338823082
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL9 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL9 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL9 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL9 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL9 all ave/time 1 1 1 c_9[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL9 all ave/time 1 1 1 c_9[*] file rdf_all_9.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 2.51327412287184+${dtheta}
variable angle_lo equal 2.51327412287184+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 2.82743338823082+${dtheta}
variable angle_hi equal 2.82743338823082+0.314159265358979

next loopindex
jump SELF myloop
compute ${loopindex} all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 10 all angular_rdf ${nrbins} * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 10 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff ${max_r} angle ${angle_lo} ${angle_hi}
compute 10 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle ${angle_lo} ${angle_hi}
compute 10 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 2.82743338823082 ${angle_hi}
compute 10 all angular_rdf 1000 * * 1 1 1 2 2 2 3 3 cutoff 10 angle 2.82743338823082 3.1415926535898
fix RDFALL${loopindex} all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL10 all ave/time ${Nevery} ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL10 all ave/time 1 ${Nrepeat} ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL10 all ave/time 1 1 ${Nfreq} c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL10 all ave/time 1 1 1 c_${loopindex}[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL10 all ave/time 1 1 1 c_10[*] file rdf_all_${loopindex}.dat mode vector
fix RDFALL10 all ave/time 1 1 1 c_10[*] file rdf_all_10.dat mode vector

# update angles
variable angle_lo equal ${angle_lo}+${dtheta}
variable angle_lo equal 2.82743338823082+${dtheta}
variable angle_lo equal 2.82743338823082+0.314159265358979
variable angle_hi equal ${angle_hi}+${dtheta}
variable angle_hi equal 3.1415926535898+${dtheta}
variable angle_hi equal 3.1415926535898+0.314159265358979

next loopindex
jump SELF myloop
# =====================================================================================




run 0
Neighbor list info ...
  update every 4 steps, delay 0 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 4.5
  ghost atom cutoff = 12
  binsize = 2.25, bins = 24 24 24
  11 neighbor lists, perpetual/occasional/extra = 1 10 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (2) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (3) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (4) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (5) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (6) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (7) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (8) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (9) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (10) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
  (11) compute angular_rdf, occasional
      attributes: half, newton on, cut 12
      pair build: half/bin/atomonly/newton
      stencil: half/bin/3d/newton
      bin: standard
Per MPI rank memory allocation (min/avg/max) = 7.123 | 7.127 | 7.132 Mbytes
Step Temp E_pair E_mol TotEng Press 
       0            0   -32.394235            0   -32.394235   -707.02002 
Loop time of 3.7988e-06 on 30 procs for 0 steps with 8000 atoms

162.3% CPU use with 30 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0          | 0          | 0          |   0.0 |  0.00
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0          | 0          | 0          |   0.0 |  0.00
Output  | 0          | 0          | 0          |   0.0 |  0.00
Modify  | 0          | 0          | 0          |   0.0 |  0.00
Other   |            | 3.799e-06  |            |       |100.00

Nlocal:    266.667 ave 277 max 259 min
Histogram: 2 4 5 6 0 5 3 3 0 2
Nghost:    3684.1 ave 3706 max 3661 min
Histogram: 1 3 3 5 2 3 4 4 3 2
Neighs:    2315.7 ave 2442 max 2196 min
Histogram: 1 3 6 3 3 4 2 3 3 2

Total # of neighbors = 69471
Ave neighs/atom = 8.68388
Neighbor list builds = 0
Dangerous builds = 0
Total wall time: 0:00:00
